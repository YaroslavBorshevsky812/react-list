{"version":3,"sources":["components/Pagination.jsx","components/TableHeader.jsx","components/MyInput.jsx","components/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["Pagination","total","itemsPerPage","currentPage","onPageChange","useState","totalPages","setTotalPages","useEffect","Math","ceil","paginationItems","useMemo","pages","i","className","push","onClick","TableHeader","headers","onSorting","sortingField","setSortingField","sortingOrder","setSortingOrder","map","name","field","sortable","order","onSortingChange","MyInput","onSearch","placeholder","search","setSearch","value","onChange","e","target","Table","comments","setComments","totalItems","setTotalItems","setCurrentPage","sorting","setSorting","fetch","then","response","json","commentsData","computedComments","filter","comment","toLowerCase","includes","email","body","reversed","sort","a","b","localeCompare","length","slice","page","scope","id","App","props","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e9d36d9.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\n\r\nconst Pagination = ({\r\n    total = 0,\r\n    itemsPerPage = 10,\r\n    currentPage = 1,\r\n    onPageChange\r\n}) => {\r\n    const [totalPages, setTotalPages] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (total > 0 && itemsPerPage > 0)\r\n            setTotalPages(Math.ceil(total / itemsPerPage));\r\n    }, [total, itemsPerPage]);\r\n\r\n    const paginationItems = useMemo(() => {\r\n        const pages = [];\r\n        for (let i = 1; i <= totalPages; i++) {\r\n            let className = \"page-item\"\r\n            if(i === currentPage) className = \"page-item active\"\r\n            pages.push(\r\n                <li \r\n                    className={className}\r\n                    key={i}\r\n                    onClick={() => onPageChange(i)}\r\n                >\r\n                    {i}\r\n                </li>\r\n            );\r\n        }\r\n        return pages;\r\n    }, [totalPages, currentPage, onPageChange]);\r\n\r\n\r\n    if( totalPages === 0 ) return null\r\n    \r\n    return (\r\n      <div>\r\n          <ul className=\"pagination\">\r\n              {paginationItems}\r\n          </ul>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Pagination","import { useState } from 'react'\r\n\r\n\r\nconst TableHeader = ({ headers, onSorting }) => {\r\n    const [sortingField, setSortingField] = useState(\"\");\r\n    const [sortingOrder, setSortingOrder] = useState(\"asc\");\r\n\r\n    const onSortingChange = (field) => {\r\n      const order =\r\n          field === sortingField && sortingOrder === \"asc\" ? \"desc\" : \"asc\";\r\n\r\n      setSortingField(field);\r\n      setSortingOrder(order);\r\n      onSorting(field, order);\r\n    };\r\n\r\n    return (\r\n      <tr>\r\n        <th className=\"sort\"><span>сортировать по:</span></th>\r\n        {\r\n            headers.map(({name, field, sortable}) => (\r\n                    <th\r\n                        key={name}\r\n                        onClick={() =>\r\n                          sortable ? onSortingChange(field) : null\r\n                        }\r\n                    >\r\n                        {name}\r\n                    </th>\r\n            ))\r\n        }\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import { useState } from 'react'\r\n\r\nconst MyInput = ({onSearch, placeholder}) => {\r\n    \r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    const onInputChange = value => {\r\n        setSearch(value);\r\n        onSearch(value);\r\n    };\r\n\r\n    return (\r\n        <input \r\n            className=\"myInput\" \r\n            placeholder={placeholder}\r\n            value={search}\r\n            onChange={e => onInputChange( e.target.value )}\r\n        >\r\n\r\n        </input>\r\n    )\r\n}\r\n\r\nexport default MyInput","import { useState, useEffect, useMemo } from 'react'\r\nimport Pagination from '../components/Pagination'\r\nimport TableHeader from './TableHeader';\r\nimport MyInput from './MyInput'\r\n\r\n\r\nconst Table = () => {\r\n  const [comments, setComments] = useState([]);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [sorting, setSorting] = useState({ field: \"\", order: \"\" });\r\n\r\n  const ITEMS_PER_PAGE = 50;\r\n\r\n  const headers = [\r\n    { name: \"No#\", field: \"id\", sortable: false },\r\n    { name: \"Name\", field: \"name\", sortable: true },\r\n    { name: \"Email\", field: \"email\", sortable: true },\r\n    { name: \"Comment\", field: \"body\", sortable: true }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const getData = () => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/comments\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setComments(json);\r\n            });\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  const commentsData = useMemo(() => {\r\n    let computedComments = comments\r\n\r\n    if (search) {\r\n      computedComments = computedComments.filter(\r\n          comment =>\r\n              comment.name.toLowerCase().includes(search.toLowerCase()) ||\r\n              comment.email.toLowerCase().includes(search.toLowerCase()) || \r\n              comment.body.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (sorting.field) {\r\n      const reversed = sorting.order === \"asc\" ? 1 : -1;\r\n      computedComments = computedComments.sort(\r\n          (a, b) =>\r\n              reversed * a[sorting.field].localeCompare(b[sorting.field])\r\n      );\r\n    }\r\n\r\n    setTotalItems(computedComments.length);\r\n    return computedComments.slice(\r\n      (currentPage - 1) * ITEMS_PER_PAGE,\r\n      (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE\r\n    );\r\n  },  [comments, currentPage, search, sorting])\r\n\r\n    return (\r\n    <div className=\"table-wrapper\">\r\n          <MyInput\r\n              onSearch={value => {\r\n                setSearch(value);\r\n                setCurrentPage(1);\r\n              }}\r\n              placeholder=\"поиск...\"\r\n          />\r\n\r\n          <Pagination\r\n            total={totalItems}\r\n            itemsPerPage={ITEMS_PER_PAGE}\r\n            currentPage={currentPage}\r\n            onPageChange={page => setCurrentPage(page)}\r\n          />\r\n\r\n          <table>\r\n                <caption>Table</caption>\r\n                <thead>\r\n                    <TableHeader\r\n                      headers={headers}\r\n                      onSorting={(field, order) =>\r\n                        setSorting({ field, order })\r\n                      }\r\n                    />\r\n                </thead>\r\n\r\n                <tbody>\r\n                  {commentsData.map(comment => (\r\n                        <tr\r\n                          key={comment.id}\r\n                        >\r\n                            <th scope=\"row\" >\r\n                                {comment.id}\r\n                            </th>\r\n                            <td>{comment.name}</td>\r\n                            <td>{comment.email}</td>\r\n                            <td>{comment.body}</td>\r\n                        </tr>\r\n                      ))}\r\n                </tbody>\r\n          </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Table","\nimport Table from './components/Table'\n\nconst App = props => {\n    return (\n        <Table/>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}